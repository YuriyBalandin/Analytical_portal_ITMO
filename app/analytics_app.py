from matplotlib.backends.backend_agg import RendererAgg
import streamlit as st
import numpy as np
import pandas as pd
import seaborn as sns
from matplotlib import pyplot as plt
from train_model import *
sns.set_style('darkgrid')


train = pd.read_csv('./train.csv')
test = pd.read_csv('./test.csv')
test_predicted = pd.read_csv('./test_predicted.csv')
comp_teachers = pd.read_csv('./comp_teachers.csv')
comp_disc = pd.read_csv('./comp_disc.csv')
comp_marks = pd.read_csv('./comp_marks.csv')
comp_portrait = pd.read_csv('./comp_portrait.csv')
comp_students = pd.read_csv('./comp_students.csv')


def find_user(USER_ID):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Å—Ç—É–¥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º ISU
    """
    userd_ids = list(train.ISU.unique())
    return int(USER_ID) in userd_ids

def get_user_id_discs(USER_ID):
    """
    –ò—â–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª
    """
    comp_disc1 = comp_disc.dropna()
    comp_disc1 = comp_disc1[['DISC_ID', 'DISC_NAME', 'SEMESTER']].drop_duplicates()
    df1 = train.merge(comp_disc1, on = ['DISC_ID', 'SEMESTER'], how = 'left')
    df1 = df1.dropna()
    return list(df1[(df1.ISU == int(USER_ID)) & (df1.TYPE_NAME == '–≠–∫–∑–∞–º–µ–Ω')].DISC_NAME.unique())

def get_user_id_predict_discs(USER_ID):
    """
    –ò—â–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –µ–º—É –µ—â–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –∑–∞–∫–æ–Ω—á–∏—Ç—å
    """
    comp_disc1 = comp_disc.dropna()
    comp_disc1 = comp_disc1[['DISC_ID', 'DISC_NAME', 'SEMESTER']].drop_duplicates()
    df1 = test.merge(comp_disc1, on = ['DISC_ID', 'SEMESTER'], how = 'left')
    df1 = df1.dropna()
    df1['disc_and_type'] = df1['DISC_NAME'] + ' - ' + df1['TYPE_NAME']
    return list(df1[(df1.ISU == int(USER_ID)) & ((df1.TYPE_NAME == '–≠–∫–∑–∞–º–µ–Ω') | (df1.TYPE_NAME == '–ó–∞—á–µ—Ç'))].disc_and_type.unique())

def get_prediction(USER_ID, disc_and_type):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ —Å–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É
    """
    comp_disc1 = comp_disc.dropna()
    comp_disc1 = comp_disc1[['DISC_ID', 'DISC_NAME', 'SEMESTER']].drop_duplicates()
    df1 = test_predicted.merge(comp_disc1, on = ['DISC_ID', 'SEMESTER'], how = 'left')
    df1 = df1.dropna()
    df1['disc_and_type'] = df1['DISC_NAME'] + ' - ' + df1['TYPE_NAME']
    prob = df1[(df1.disc_and_type == disc_and_type) & (df1.ISU == int(USER_ID) )].predicted_probas.values[0]
    return prob

def get_marks(USER_ID):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
    """
    comp_disc1 = comp_disc.dropna()
    comp_marks1 = comp_marks.drop_duplicates()[['ISU', 'DISC_ID', 'TYPE_NAME', 'ST_YEAR', 'SEMESTER', 'MARK']]
    comp_disc1 = comp_disc1[['DISC_ID', 'DISC_NAME', 'SEMESTER']].drop_duplicates()
    df1 = train.merge(comp_disc1, on = ['DISC_ID', 'SEMESTER'], how = 'left')
    df1 = df1.merge(comp_marks1, on=['ISU', 'DISC_ID', 'TYPE_NAME', 'ST_YEAR', 'SEMESTER'], how='left')
    df1 = df1.dropna()
    return df1[df1.ISU == int(USER_ID)].sort_values(['ST_YEAR',
            'SEMESTER', 'TYPE_NAME']).drop_duplicates()[[ 'ST_YEAR', 'SEMESTER', 'DISC_NAME', 'TYPE_NAME', 'MARK' ]].reset_index(drop=True)



def plot_marks_distr(USER_ID, plot):
    """
    –†–∏—Å—É–µ—Ç –≥–∏—Å–æ–≥—Ä–∞–º–º—ã
    """
    mapping =  {'–∑–∞—á–µ—Ç': 3, '–Ω–µ–∑–∞—á': 2, '–Ω–µ—è–≤–∫–∞': 2, '–æ—Å–≤': 3, '2': 2,'3': 3, '4': 4,'5': 5}

    comp_disc1 = comp_disc.dropna()
    comp_marks1 = comp_marks.drop_duplicates()[['ISU', 'DISC_ID', 'TYPE_NAME', 'ST_YEAR', 'SEMESTER', 'MARK']]
    comp_disc1 = comp_disc1[['DISC_ID', 'DISC_NAME', 'SEMESTER']].drop_duplicates()

    df1 = train.merge(comp_disc1, on = ['DISC_ID', 'SEMESTER'], how = 'left')
    df1 = df1.merge(comp_marks1, on=['ISU', 'DISC_ID', 'TYPE_NAME', 'ST_YEAR', 'SEMESTER'], how='left')
    df1 = df1.dropna()[['ISU', 'MARK', 'DISC_ID','TYPE_NAME', 'ST_YEAR']]
    df1 = df1.drop_duplicates()
    df1 = df1.merge(comp_students.groupby('ISU').min()[['MAIN_PLAN']].reset_index(), how = 'inner', on = 'ISU')

    USER_ST_YEAR = df1[df1.ISU == int(USER_ID)].ST_YEAR.max()
    USER_MAIN_PLAN = df1[df1.ISU == int(USER_ID)].MAIN_PLAN.min()

    if plot == 'year':
        ecz =  df1[(df1.TYPE_NAME == '–≠–∫–∑–∞–º–µ–Ω') & (df1.ST_YEAR == USER_ST_YEAR)]
        ecz['MARK'] = ecz['MARK'].map(mapping)
        mean_marks = ecz.groupby('ISU').mean()[['MARK']].reset_index()
    elif plot == 'plan':
        ecz =  df1[(df1.TYPE_NAME == '–≠–∫–∑–∞–º–µ–Ω') & (df1.MAIN_PLAN == USER_MAIN_PLAN)]
        ecz['MARK'] = ecz['MARK'].map(mapping)
        mean_marks = ecz.groupby('ISU').mean()[['MARK']].reset_index()
    elif plot == 'all':
        ecz =  df1[(df1.TYPE_NAME == '–≠–∫–∑–∞–º–µ–Ω')]
        ecz['MARK'] = ecz['MARK'].map(mapping)
        mean_marks = ecz.groupby('ISU').mean()[['MARK']].reset_index()

    mean_mark = np.round(mean_marks[mean_marks.ISU == int(USER_ID)].MARK.values[0], 2)
    fig = plt.figure(figsize=(10, 6))
    sns.histplot(mean_marks, x = 'MARK', bins = 20)
    plt.axvline(mean_mark, 0, 0.95, color='r', label = f'–¢–≤–æ—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: {mean_mark}')
    plt.legend(fontsize = 'large')
    return fig


def plot_disc_marks_distr(DISC_NAME):
    """
    –†–∏—Å—É–µ—Ç –≥–∏—Å–æ–≥—Ä–∞–º–º—ã
    """
    mapping =  {'–∑–∞—á–µ—Ç': 3, '–Ω–µ–∑–∞—á': 2, '–Ω–µ—è–≤–∫–∞': 2, '–æ—Å–≤': 3, '2': 2,'3': 3, '4': 4,'5': 5}
    comp_disc1 = comp_disc.dropna()
    comp_marks1 = comp_marks.drop_duplicates()[['ISU', 'DISC_ID', 'TYPE_NAME', 'ST_YEAR', 'SEMESTER', 'MARK']]
    comp_disc1 = comp_disc1[['DISC_ID', 'DISC_NAME', 'SEMESTER']].drop_duplicates()
    df1 = train.merge(comp_disc1, on = ['DISC_ID', 'SEMESTER'], how = 'left')
    df1 = df1.merge(comp_marks1, on=['ISU', 'DISC_ID', 'TYPE_NAME', 'ST_YEAR', 'SEMESTER'], how='left')
    df1 = df1.dropna()[['ISU', 'MARK', 'DISC_ID','TYPE_NAME', 'ST_YEAR', 'DISC_NAME']]
    df1 = df1.drop_duplicates()
    df1 = df1.merge(comp_students.groupby('ISU').min()[['MAIN_PLAN']].reset_index(), how = 'inner', on = 'ISU')
    df1 = df1[(df1.TYPE_NAME == '–≠–∫–∑–∞–º–µ–Ω') & (df1.DISC_NAME == DISC_NAME)]
    df1.MARK = df1.MARK.map(mapping)
    df1 = df1.groupby('MARK').count()[['ISU']].reset_index()
    fig = plt.figure(figsize=(10, 6))
    sns.barplot(data = df1, x = 'MARK', y = 'ISU', label= f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –Ω–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {DISC_NAME}', palette="Blues_d")
    plt.legend(fontsize = 'medium')
    return fig

#st.set_page_config(layout="wide")

row0_spacer1, row0_1, row0_spacer2, row0_2, row0_spacer3 = st.columns(
    (.1, 2, .2, 1, .1))

row0_1.title('–°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ò–¢–ú–û')


with row0_2:
    st.write('')

row0_2.caption(
    '–í–µ–±-—Å–µ—Ä–≤–∏—Å, —Å–æ–∑–¥–∞–Ω–Ω—ã–π [–ë–∞–ª–∞–Ω–¥–∏–Ω—ã–º –Æ—Ä–∏–µ–º](https://www.linkedin.com/in/yuriybalandin), \
     –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–º—É "–ò–Ω–∂–µ–Ω–µ—Ä–∏—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"')

st.title("\n")
row1_spacer1, row1_1, row1_spacer2 = st.columns((.1, 3.2, .1))

can_continue = False

with row1_1:

    st.markdown("–ü—Ä–∏–≤–µ—Ç! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ç—ã —Å–º–æ–∂–µ—à—å —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–µ–π —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å—é, \
    —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å –µ—ë —Å –æ–±—â–µ—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—Å–∫–æ–π, –∏ –¥–∞–∂–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–≥–ª—è–¥—ã–≤–∞—Ç—å –≤ –±—É–¥—É—â–µ–µ)")

    USER_ID = st.text_input('–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ–π ID üëá')

    if USER_ID == '':
        st.caption('–ö–∞–∂–µ—Ç—Å—è —Ç—ã –Ω–∏—á–µ–≥–æ –Ω–µ –≤–≤–µ–ª. –ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –≤–≤–µ–¥–∏ —Å–≤–æ–π ID')
    elif find_user(USER_ID) == False:
        st.caption('–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±—è, –ø—Ä–æ–≤–µ—Ä—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ ID')
    else :
        st.caption(f"–û—Ç–ª–∏—á–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ!")
        can_continue = True

row1_spacer2_0, row2_1, row1_spacer2_2 = st.columns((.1, 3.2, .1))

with row2_1:
    if can_continue == True:

        to_do = st.selectbox("–í—ã–±–µ—Ä–∏ —Ç–æ, —á—Ç–æ —Ö–æ—Ç–µ–ª –±—ã —É–∑–Ω–∞—Ç—å:", (
                "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏–∑ —Ç–≤–æ–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞",
                 "–£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã —Å–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É"))

        if to_do == "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ –∏ —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å":
            if st.button('–£–∑–Ω–∞—Ç—å'):
                try:
                    st.markdown("–¢–≤–æ—è —Ç–µ–∫—É—â–∞—è —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º:")
                    df_user_marks = get_marks(USER_ID)
                    st.write(df_user_marks)

                    st.markdown("–¢–≤–æ—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å—Ä–µ–¥–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –Ω–∞ —Ç–æ–º –∂–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ–±—É—á–µ–Ω–∏—è:")
                    fig = plot_marks_distr(USER_ID, 'plan')
                    st.pyplot(fig)

                    st.markdown("–¢–≤–æ—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å—Ä–µ–¥–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∑–∞ —ç—Ç–æ—Ç –≥–æ–¥:")
                    fig = plot_marks_distr(USER_ID, 'year')
                    st.pyplot(fig)

                    st.markdown("–¢–≤–æ—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:")
                    fig = plot_marks_distr(USER_ID, 'all')
                    st.pyplot(fig)
                except:
                    st.markdown("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")




        elif to_do == "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ –∏–∑ —Ç–≤–æ–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞":
            discs = get_user_id_discs(USER_ID)
            disc = st.selectbox("–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É –∏–∑ —Å–≤–æ–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –ø–ª–∞–Ω–∞:", discs)
            if st.button(f'–£–∑–Ω–∞—Ç—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ {disc}'):
                fig = plot_disc_marks_distr(disc)
                st.pyplot(fig)


        elif to_do == "–£–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —à–∞–Ω—Å—ã —Å–¥–∞—Ç—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É":
            discs = get_user_id_predict_discs(USER_ID)
            disc = st.selectbox("–í—ã–±–µ—Ä–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É:", discs)

            if st.button('–ó–∞–≥–ª—è–Ω—É—Ç—å –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ–µ –±—É–¥—É—â–µ–µ'):

                prediction = get_prediction(USER_ID, disc)
                st.markdown(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, —á—Ç–æ —Ç—ã —Å–¥–∞—à—å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É {disc}: {int((1 - prediction) * 100)}%")

                if prediction < 0.5:
                    st.markdown("–ü—Ä–∏—á–∏–Ω –¥–ª—è –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ –Ω–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–π —É—á–∏—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
                else:
                    st.markdown("–•–º–º, –∫–∞–∂–µ—Ç—Å—è —Ç–µ–±–µ —Å—Ç–æ–∏—Ç —Å–µ—Ä—å–µ–∑–Ω–µ–µ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–µ, \
                    –Ω–æ –º—ã –≤–µ—Ä–∏–º, —á—Ç–æ —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!")

st.title("\n")
admin_tools = st.expander('–ê–∫—Ç—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ üëâ')
with admin_tools:
    password = st.text_input(
        "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å", type="password")
    if len(password) != 0 and password != 'password42':
        st.markdown('–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å')
    elif password is not None and password == 'password42':
        uploaded_files = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã:", accept_multiple_files=True)
        counter_correct = 0
        if len(uploaded_files) > 1 and len(uploaded_files) == 7:
            for f in uploaded_files:
                if f.name == 'train.csv':
                    train = pd.read_csv(f)
                    counter_correct += 1
                elif f.name == 'test.csv':
                    test = pd.read_csv(f)
                    counter_correct += 1
                elif f.name == 'comp_teachers.csv':
                    comp_teachers = pd.read_csv(f)
                    counter_correct += 1
                elif f.name == 'comp_disc.csv':
                    comp_disc = pd.read_csv(f)
                    counter_correct += 1
                elif f.name == 'comp_marks.csv':
                    comp_marks = pd.read_csv(f)
                    counter_correct += 1
                elif f.name == 'comp_portrait.csv':
                    comp_portrait = pd.read_csv(f)
                    counter_correct += 1
                elif f.name == 'comp_students.csv':
                    comp_students = pd.read_csv(f)
                    counter_correct += 1
                else:
                    st.markdown(f.name + '–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª')
            if counter_correct == 7:
                st.markdown('–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã')
                if st.button('–ù–∞—á–∞—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö'):
                    st.write('–ù–∞—á–∏–Ω–∞–µ–º...')

                    train.to_csv('train.csv', index = False)
                    test.to_csv('test.csv')
                    comp_teachers.to_csv('comp_teachers.csv')
                    comp_disc.to_csv('comp_disc.csv')
                    comp_marks.to_csv('comp_marks.csv')
                    comp_portrait.to_csv('comp_portrait.csv')
                    comp_students.to_csv('comp_students.csv')

                    train_model(train, test, comp_teachers, comp_disc, comp_marks, comp_portrait, comp_students)

                    st.write('–î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã')

            else:
                st.markdown('–ù–µ –≤—Å–µ –Ω—É–∂–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã')

        else:
            st.markdown('–ù–µ–±—Ö–æ–¥–∏–º–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å 7 —Ñ–∞–π–ª–æ–≤')
